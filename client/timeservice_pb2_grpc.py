# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import timeservice_pb2 as timeservice__pb2


class TimeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Now = channel.unary_unary(
                '/TimeService/Now',
                request_serializer=timeservice__pb2.NowRequest.SerializeToString,
                response_deserializer=timeservice__pb2.TimeUpdate.FromString,
                )
        self.Stream = channel.unary_stream(
                '/TimeService/Stream',
                request_serializer=timeservice__pb2.TimeStreamRequest.SerializeToString,
                response_deserializer=timeservice__pb2.TimeUpdate.FromString,
                )


class TimeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Now(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stream(self, request, context):
        """asagidaki bir server stream ornegidir. http2 sayesinde tek bir tcp baglantisi uzerinden
        websocketlerde oldugu gibi defaatle veri gonderip alma islemi yapabiliyoruz.
        asagidaki stream TimeUpdate ifadesi, server'in TimeUpdate tipinde veri stream edecegini
        yani defaatle bu tipte bir veriyi donebilecegini belirtiyor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Now': grpc.unary_unary_rpc_method_handler(
                    servicer.Now,
                    request_deserializer=timeservice__pb2.NowRequest.FromString,
                    response_serializer=timeservice__pb2.TimeUpdate.SerializeToString,
            ),
            'Stream': grpc.unary_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=timeservice__pb2.TimeStreamRequest.FromString,
                    response_serializer=timeservice__pb2.TimeUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TimeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Now(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeService/Now',
            timeservice__pb2.NowRequest.SerializeToString,
            timeservice__pb2.TimeUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TimeService/Stream',
            timeservice__pb2.TimeStreamRequest.SerializeToString,
            timeservice__pb2.TimeUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
