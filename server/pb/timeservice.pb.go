// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timeservice.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Time struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Time) Reset()         { *m = Time{} }
func (m *Time) String() string { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()    {}
func (*Time) Descriptor() ([]byte, []int) {
	return fileDescriptor_c24d50486e4ed4c3, []int{0}
}

func (m *Time) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Time.Unmarshal(m, b)
}
func (m *Time) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Time.Marshal(b, m, deterministic)
}
func (m *Time) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Time.Merge(m, src)
}
func (m *Time) XXX_Size() int {
	return xxx_messageInfo_Time.Size(m)
}
func (m *Time) XXX_DiscardUnknown() {
	xxx_messageInfo_Time.DiscardUnknown(m)
}

var xxx_messageInfo_Time proto.InternalMessageInfo

func (m *Time) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TimeUpdate struct {
	Time                 *Time    `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeUpdate) Reset()         { *m = TimeUpdate{} }
func (m *TimeUpdate) String() string { return proto.CompactTextString(m) }
func (*TimeUpdate) ProtoMessage()    {}
func (*TimeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c24d50486e4ed4c3, []int{1}
}

func (m *TimeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeUpdate.Unmarshal(m, b)
}
func (m *TimeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeUpdate.Marshal(b, m, deterministic)
}
func (m *TimeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeUpdate.Merge(m, src)
}
func (m *TimeUpdate) XXX_Size() int {
	return xxx_messageInfo_TimeUpdate.Size(m)
}
func (m *TimeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TimeUpdate proto.InternalMessageInfo

func (m *TimeUpdate) GetTime() *Time {
	if m != nil {
		return m.Time
	}
	return nil
}

type Nowrequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nowrequest) Reset()         { *m = Nowrequest{} }
func (m *Nowrequest) String() string { return proto.CompactTextString(m) }
func (*Nowrequest) ProtoMessage()    {}
func (*Nowrequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c24d50486e4ed4c3, []int{2}
}

func (m *Nowrequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nowrequest.Unmarshal(m, b)
}
func (m *Nowrequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nowrequest.Marshal(b, m, deterministic)
}
func (m *Nowrequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nowrequest.Merge(m, src)
}
func (m *Nowrequest) XXX_Size() int {
	return xxx_messageInfo_Nowrequest.Size(m)
}
func (m *Nowrequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Nowrequest.DiscardUnknown(m)
}

var xxx_messageInfo_Nowrequest proto.InternalMessageInfo

type TimeStreamRequest struct {
	Length               int32    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeStreamRequest) Reset()         { *m = TimeStreamRequest{} }
func (m *TimeStreamRequest) String() string { return proto.CompactTextString(m) }
func (*TimeStreamRequest) ProtoMessage()    {}
func (*TimeStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c24d50486e4ed4c3, []int{3}
}

func (m *TimeStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeStreamRequest.Unmarshal(m, b)
}
func (m *TimeStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeStreamRequest.Marshal(b, m, deterministic)
}
func (m *TimeStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeStreamRequest.Merge(m, src)
}
func (m *TimeStreamRequest) XXX_Size() int {
	return xxx_messageInfo_TimeStreamRequest.Size(m)
}
func (m *TimeStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeStreamRequest proto.InternalMessageInfo

func (m *TimeStreamRequest) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func init() {
	proto.RegisterType((*Time)(nil), "Time")
	proto.RegisterType((*TimeUpdate)(nil), "TimeUpdate")
	proto.RegisterType((*Nowrequest)(nil), "Nowrequest")
	proto.RegisterType((*TimeStreamRequest)(nil), "TimeStreamRequest")
}

func init() {
	proto.RegisterFile("timeservice.proto", fileDescriptor_c24d50486e4ed4c3)
}

var fileDescriptor_c24d50486e4ed4c3 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xc9, 0xcc, 0x4d,
	0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe1,
	0x62, 0x09, 0xc9, 0xcc, 0x4d, 0x15, 0x12, 0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0xd4, 0xb9, 0xb8, 0x40, 0xb2, 0xa1, 0x05, 0x29,
	0x89, 0x25, 0xa9, 0x42, 0x92, 0x5c, 0x2c, 0x20, 0x03, 0xc0, 0x4a, 0xb8, 0x8d, 0x58, 0xf5, 0x40,
	0x52, 0x41, 0x60, 0x21, 0x25, 0x1e, 0x2e, 0x2e, 0xbf, 0xfc, 0xf2, 0xa2, 0xd4, 0xc2, 0xd2, 0xd4,
	0xe2, 0x12, 0x25, 0x6d, 0x2e, 0x41, 0x90, 0x5c, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x6e, 0x10, 0x44,
	0x50, 0x48, 0x8c, 0x8b, 0x2d, 0x27, 0x35, 0x2f, 0xbd, 0x24, 0x03, 0xac, 0x9f, 0x35, 0x08, 0xca,
	0x33, 0x8a, 0xe6, 0xe2, 0x06, 0x2b, 0x86, 0x38, 0x4b, 0x48, 0x9e, 0x8b, 0xd9, 0x2f, 0xbf, 0x5c,
	0x88, 0x5b, 0x0f, 0x61, 0x9e, 0x14, 0xb7, 0x1e, 0x92, 0x2b, 0xb4, 0xb9, 0xd8, 0x20, 0x06, 0x0b,
	0x09, 0xe9, 0x61, 0xd8, 0x82, 0xa2, 0xd4, 0x80, 0xd1, 0x89, 0x25, 0x8a, 0xa9, 0x20, 0x29, 0x89,
	0x0d, 0xec, 0x57, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x7a, 0xdd, 0x51, 0x00, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeServiceClient is the client API for TimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeServiceClient interface {
	Now(ctx context.Context, in *Nowrequest, opts ...grpc.CallOption) (*TimeUpdate, error)
	Stream(ctx context.Context, in *TimeStreamRequest, opts ...grpc.CallOption) (TimeService_StreamClient, error)
}

type timeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServiceClient(cc grpc.ClientConnInterface) TimeServiceClient {
	return &timeServiceClient{cc}
}

func (c *timeServiceClient) Now(ctx context.Context, in *Nowrequest, opts ...grpc.CallOption) (*TimeUpdate, error) {
	out := new(TimeUpdate)
	err := c.cc.Invoke(ctx, "/TimeService/Now", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServiceClient) Stream(ctx context.Context, in *TimeStreamRequest, opts ...grpc.CallOption) (TimeService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TimeService_serviceDesc.Streams[0], "/TimeService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeService_StreamClient interface {
	Recv() (*TimeUpdate, error)
	grpc.ClientStream
}

type timeServiceStreamClient struct {
	grpc.ClientStream
}

func (x *timeServiceStreamClient) Recv() (*TimeUpdate, error) {
	m := new(TimeUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeServiceServer is the server API for TimeService service.
type TimeServiceServer interface {
	Now(context.Context, *Nowrequest) (*TimeUpdate, error)
	Stream(*TimeStreamRequest, TimeService_StreamServer) error
}

// UnimplementedTimeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTimeServiceServer struct {
}

func (*UnimplementedTimeServiceServer) Now(ctx context.Context, req *Nowrequest) (*TimeUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Now not implemented")
}
func (*UnimplementedTimeServiceServer) Stream(req *TimeStreamRequest, srv TimeService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterTimeServiceServer(s *grpc.Server, srv TimeServiceServer) {
	s.RegisterService(&_TimeService_serviceDesc, srv)
}

func _TimeService_Now_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nowrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServiceServer).Now(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TimeService/Now",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServiceServer).Now(ctx, req.(*Nowrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeServiceServer).Stream(m, &timeServiceStreamServer{stream})
}

type TimeService_StreamServer interface {
	Send(*TimeUpdate) error
	grpc.ServerStream
}

type timeServiceStreamServer struct {
	grpc.ServerStream
}

func (x *timeServiceStreamServer) Send(m *TimeUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _TimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TimeService",
	HandlerType: (*TimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Now",
			Handler:    _TimeService_Now_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TimeService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "timeservice.proto",
}
